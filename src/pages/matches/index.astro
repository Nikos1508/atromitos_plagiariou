---
import Layout from "../../layout/default.astro";
import { getCollection } from "astro:content";

let match = await getCollection("match");
match = match.map(entry => entry.data) as any;
---

<Layout title="Αγώνες">

    <div>
        <h2 class="text-blanched-almond text-5xl flex justify-center"> Β' τοπικό Θεσσαλονίκης, Χος όμιλος</h2>
    </div>

	<div class="mt-8 overflow-hidden">

        <div class="flex flex-row justify-evenly items-center text-blanched-almond my-4">
            <a href="../matches/1">
                <div class="animate slide1 flex justify-center items-center border-4 rounded-xl p-3 border-blue-400 bg-sky-600 w-[30vw]">
                        <h2 class="text-center text-[24px]"> 
                            {match[0].teams}
                            <br> {match[0].score}
                            <br> 1η Αγωνιστική
                        </h2> 
                </div>
            </a>
            <a href="../matches/2">
                <div class="animate slide2 flex justify-center items-center border-4 rounded-xl p-2 border-blue-400 bg-sky-600 w-[30vw]">
                    <h2 class="text-center text-[24px]"> 
                        {match[1].teams}
                        <br> {match[1].score}
                        <br> 2η Αγωνιστική
                    </h2> 
                </div>  
            </a>

            <div class="animate slide3 flex justify-center items-center border-4 rounded-xl p-3 border-blue-400 bg-sky-600 w-[30vw]">
                <h2 class="text-center text-[24px]"> 
                    {match[2].teams}
                    <br> {match[2].score} 
                    <br> 3η Αγωνιστική (13/1/2025)
                </h2> 
            </div>

        </div>
    </div>

<style>
    .animate {
        opacity: 0;
        transition: opacity 0.75s, transform 0.75s;
    }

    .animate.in-view {
        animation-duration: 2s;
        animation-delay: 0.1s;
        animation-timing-function: cubic-bezier(.25,.50,.75,1);
        animation-fill-mode: forwards;
    }

    .animate.in-view.slide1 { 
        animation-name: animate-slide1; 
    }

    .animate.in-view.slide2 { 
        animation-name: animate-slide2; 
    }

    .animate.in-view.slide3 { 
        animation-name: animate-slide3; 
    }

    @keyframes animate-slide1 {
        0% {
            opacity: 0;
            transform: translate(-100px, 0);
        }
        100% {
            opacity: 1;
            transform: translate(0, 0);
        }
    }

    @keyframes animate-slide2 {
        0% {
            opacity: 0;
            transform: translate(0, 50px);
        }
        100% {
            opacity: 1;
            transform: translate(0, 0);
        }
    }

    @keyframes animate-slide3 {
        0% {
            opacity: 0;
            transform: translate(100px, 0);
        }
        100% {
            opacity: 1;
            transform: translate(0, 0);
        }
    }
</style>
<script>
    document.addEventListener("DOMContentLoaded", function () {
    const elements = document.querySelectorAll('.animate');

    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('in-view');
                observer.unobserve(entry.target);
            }
        });
    }, {
        threshold: 0.2
    });

    elements.forEach(element => {
        observer.observe(element);
    });
});
</script>
</Layout>